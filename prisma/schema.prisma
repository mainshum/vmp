// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum VMPRole {
  NONE
  CLIENT
  VENDOR
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?

  image    String?
  accounts Account[]
  sessions Session[]

  role VMPRole @default(NONE)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum ProjectFor {
  INTERNAL
  EXTERNAL
}

enum CompanySize {
  BELOW10
  FROM11TO50
  FROM50TO250
  FROM250TO1000
  ABOVE1000
}

enum Seniority {
  JUNIOR
  MID
  SENIOR
  PRINCIPAL
}

model Customer {
  /// @zod.min(3, {message: "Minimum of 3 characters"})
  id           String      @id @default(cuid())
  /// @zod.min(3, {message: "Minimum of 3 characters"})
  companyName  String
  /// @zod.min(3, {message: "Minimum of 3 characters"})
  addressLine1 String
  /// @zod.min(3, {message: "Minimum of 3 characters"})
  addressLine2 String
  /// @zod.min(3, {message: "Minimum of 3 characters"})
  postalCode   String
  /// @zod.min(3, {message: "Minimum of 3 characters"})
  city         String
  /// @zod.min(3, {message: "Minimum of 3 characters"})
  taxId        String
  /// @zod.min(3, {message: "Minimum of 3 characters"})
  name         String
  /// @zod.min(3, {message: "Minimum of 3 characters"})
  surname      String
  /// @zod.min(3, {message: "Minimum of 3 characters"})
  position     String
  /// @zod.min(3, {message: "Minimum of 3 characters"})
  mail         String
  /// @zod.min(3, {message: "Minimum of 3 characters"})
  phone        String
  companySize  CompanySize @default(BELOW10)
  projectFor   ProjectFor  @default(INTERNAL)
}

enum RequestStatus {
  DRAFT
  PENDING
  NOOFFERS
  WITHOFFERS
  EXPIRED
}

enum JobProfile {
  SOFTWARE_ENGINEER
  DATA_SPECIALIST
  DEVOPS
  QUALITY_ASSURANCE
}

enum JobSubProfile {
  FRONTEND
  BACKEND
  FULLSTACK
  MOBILE
}

model Request {
  /// @zod.cuid()
  id String @id @default(cuid())

  /// @zod.custom(z.date({coerce: true}))
  validUntil DateTime

  /// @zod.custom(z.date({coerce: true}))
  creationDate DateTime
  status       RequestStatus

  /// @zod.min(3, {message: "Minimum of 3 characters"})
  name               String
  workType           WorkType
  projectStage       ProjectStage
  projectDuration    ProjectDuration
  projectMethodology ProjectMethodology

  fundingGuaranteed Boolean
  pmExists          Boolean

  /// @zod.min(10, {message: "Minimum 10 characters"})
  description String

  profile    JobProfile
  subProfile JobSubProfile @default(FULLSTACK)
  seniority  Seniority     @default(JUNIOR)

  /// @zod.custom(imports.positiveInteger)
  hourlyRate Int

  /// @zod.positive({ message: "Needs to be a positive integer" })
  availability Int

  /// @zod.custom(z.date({coerce: true, required_error: "Start date is required"}))
  startDate DateTime

  /// @zod.custom(z.date({coerce: true, required_error: "End date is required"}))
  endDate DateTime

  /// @zod.custom(imports.positiveInteger)
  noticePeriod Int

  /// @zod.min(3, {message: "Minimum of 3 characters"})
  officeLocation String?

  /// @zod.custom(imports.positiveInteger15)
  daysInOffice Int?

  domesticTravel      Boolean
  internationalTravel Boolean

  technical Json?

  offers Offer[]
}

enum WorkType {
  FULLY_REMOTE
  ONSITE
  HYBRID
}

enum OfferStatus {
  DRAFT
  PENDING
  SENT
  EXPIRED
}

model Offer {
  id            String      @id @default(cuid())
  matchingGrade Int?
  offerStatus   OfferStatus @default(PENDING)
  validUntil    DateTime
  creationDate  DateTime
  request       Request?    @relation(fields: [requestId], references: [id])
  requestId     String
}

enum ProjectStage {
  NEW
  PLANNING
  ANALYSIS
  DESIGN
  IMPLEMENTATION
  MAINTENANCE
}

enum ProjectDuration {
  SHORT
  MEDIUM
  MEDIUM_LONG
  LONG
}

enum ProjectMethodology {
  SCRUM
  KANBAN
  LEAN
  WATERFALL
}
